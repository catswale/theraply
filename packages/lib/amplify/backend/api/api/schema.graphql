type Therapist
  @model {
  id: ID!
  firstName: String!
  lastName: String
  email: AWSEmail!
  phoneNumber: AWSPhone
  availability: [Availability]
  clients: [TherapistClientRelationship]
    @connection(keyName: "byTherapist", fields: ["id"])
}

type Availability {
  id: ID!
  start: AWSDateTime!
  end: AWSDateTime!
}

type TherapistClientRelationship
  @model(queries: null)
  @key(name: "byTherapist", fields: ["therapistID", "clientID"])
  @key(name: "byClient", fields: ["clientID", "therapistID"]) {
  id: ID!
  therapistID: ID!
  clientID: ID!
  therapist: Therapist! @connection(fields: ["therapistID"])
  client: Client! @connection(fields: ["clientID"])
}

type Client @model 
  @auth(rules: [
    { allow: owner }, 
    { allow: owner, ownerField: "therapistIDs", operations: [read] }
  ]) {
  id: ID!
  firstName: String!
  lastName: String
  email: AWSEmail!
  phoneNumber: AWSPhone
  therapists: [TherapistClientRelationship]
    @connection(keyName: "byClient", fields: ["id"])
  therapistIDs: [String]
}

type Message
  @model
  @auth(rules: [
    { allow: owner, ownerField: "clientID" }
    { allow: owner, ownerField: "therapistID" }
  ])
  @key(
    name: "byChannelID"
    fields: ["channelID", "createdAt"]
    queryField: "messagesByChannelID"
  ) {
  id: ID!
  channelID: ID!
  authorID: String!
  body: String!
  therapistID: String!
  clientID: String!
  participants: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Booking @model {
  id: ID!
  bookingID: ID!
  start: AWSDateTime!
  end: AWSDateTime!
  state: String!
  participants: [String]!
}
