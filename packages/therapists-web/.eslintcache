[{"/Users/Cat1/repo/theraply/packages/therapists-web/src/App.tsx":"1","/Users/Cat1/repo/theraply/packages/therapists-web/src/reportWebVitals.ts":"2","/Users/Cat1/repo/theraply/packages/therapists-web/src/aws-exports.js":"3","/Users/Cat1/repo/theraply/packages/therapists-web/src/chat/Chat.page.tsx":"4","/Users/Cat1/repo/theraply/packages/therapists-web/src/index.tsx":"5","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/SignIn.page.tsx":"6","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/SignUp.page.tsx":"7","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/ProtectedRoute.tsx":"8","/Users/Cat1/repo/theraply/packages/therapists-web/src/dashboard/Dashboard.page.tsx":"9","/Users/Cat1/repo/theraply/packages/therapists-web/src/store.ts":"10","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/auth.slice.ts":"11","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/SignUpConfirm.page.tsx":"12","/Users/Cat1/repo/theraply/packages/therapists-web/src/dashboard/Client.card.tsx":"13"},{"size":1102,"mtime":1608215035123,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1606981696025,"results":"16","hashOfConfig":"15"},{"size":722,"mtime":1607501027818,"results":"17","hashOfConfig":"15"},{"size":2804,"mtime":1608215125248,"results":"18","hashOfConfig":"15"},{"size":500,"mtime":1607935359987,"results":"19","hashOfConfig":"15"},{"size":1310,"mtime":1608183172425,"results":"20","hashOfConfig":"15"},{"size":2100,"mtime":1608182753838,"results":"21","hashOfConfig":"15"},{"size":1030,"mtime":1607936130098,"results":"22","hashOfConfig":"15"},{"size":2172,"mtime":1608255863522,"results":"23","hashOfConfig":"15"},{"size":254,"mtime":1608110354511,"results":"24","hashOfConfig":"15"},{"size":1173,"mtime":1608110323701,"results":"25","hashOfConfig":"15"},{"size":1033,"mtime":1608182899264,"results":"26","hashOfConfig":"15"},{"size":695,"mtime":1608255835952,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"cdy2u8",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Cat1/repo/theraply/packages/therapists-web/src/App.tsx",["61","62","63"],"import React, {useEffect, useState} from 'react'\nimport Amplify, {Auth} from 'aws-amplify'\nimport awsExports from \"./aws-exports\";\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport {Chat} from './chat/Chat.page'\nimport {Dashboard} from './dashboard/Dashboard.page'\nimport {SignIn} from './auth/SignIn.page'\nimport {SignUp} from './auth/SignUp.page'\nimport {ConfirmSignUp} from './auth/SignUpConfirm.page'\nimport { ProtectedRoute } from './auth/ProtectedRoute';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nAmplify.configure(awsExports);\n\nconst App = () => {\n  return (\n  <Router>\n    <Switch>\n      <Route path=\"/login\" component={SignIn} />\n      <Route path=\"/signup\" component={SignUp} />\n      <Route path=\"/signup-confirm\" component={ConfirmSignUp} />\n      <ProtectedRoute path=\"/dashboard\" component={Dashboard}/>\n      <ProtectedRoute path=\"/chat\" component={Chat} />\n    </Switch>\n  </Router>\n  )\n}\n\nconst AppWrapper = () => {\n\n  return (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  )\n}\n\nexport default AppWrapper",["64","65"],"/Users/Cat1/repo/theraply/packages/therapists-web/src/reportWebVitals.ts",[],"/Users/Cat1/repo/theraply/packages/therapists-web/src/aws-exports.js",[],["66","67"],"/Users/Cat1/repo/theraply/packages/therapists-web/src/chat/Chat.page.tsx",["68"],"import React, { useEffect, useState } from 'react'\nimport { API, graphqlOperation, Auth } from 'aws-amplify'\nimport '@aws-amplify/pubsub';\n// import {Message} from '@theraply/lib';\nimport {mutations, subscriptions, queries} from '@theraply/lib';\n\nimport './Chat.css'\ntype Message = {\n  id: string;\n  channelID: string;\n  authorID: string;\n  body: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\ninterface Event {\n  provider: object;\n  value: {\n    data: {\n      onCreateMessage: Message\n    }\n  }\n}\n\nexport const Chat = (props: any) => {\n  const {channelID} = props.location.state\n  const [messages, setMessages] = useState([] as Message[]);\n  const [messageBody, setMessageBody] = useState('');\n  const [userID, setUserID] = React.useState({});\n\n  useEffect(() => {\n    fetchMessages()\n    fetchUserInfo()\n  }, []);\n  const fetchUserInfo = async () => {\n    const {username} = await Auth.currentAuthenticatedUser()\n    setUserID(username)\n  }\n\n  useEffect(() => {\n    const subscription = API\n      .graphql(graphqlOperation(subscriptions.onCreateMessage)) // @ts-ignore\n      .subscribe({\n        next: (event: Event) => { \n          setMessages([...messages, event.value.data.onCreateMessage]);\n        }\n      });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [messages]);\n\n  async function fetchMessages() {\n    const messageData = await API.graphql(graphqlOperation(queries.messagesByChannelId, {\n      channelID,\n      sortDirection: 'ASC'\n    })) as MessageData\n    type MessageData = {data: {messagesByChannelID: {items: Message[]}}}\n    const messages = messageData.data.messagesByChannelID.items;\n    setMessages(messages)\n  }\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => { \n    setMessageBody(event.target.value);\n  };\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n  \n    const input = {\n      channelID,\n      authorID: userID,\n      body: messageBody.trim()\n    };\n  \n    try {\n      setMessageBody('');\n      // @ts-ignore\n      await API.graphql(graphqlOperation(mutations.createMessage, { input }))\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n    \n  return (\n    <div className=\"container\">\n      <div className=\"messages\">\n      {messages.map((message) => (\n        <div\n          key={message.id}\n          className={message.authorID === userID ? 'message me' : 'message'}>{message.body}</div>\n        ))}\n      </div>\n      <div className=\"chat-bar\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"message\"\n            placeholder=\"Type your message here\"\n            onChange={handleChange}\n            value={messageBody}\n          />\n        </form>\n      </div>\n    </div>\n  );\n}\n","/Users/Cat1/repo/theraply/packages/therapists-web/src/index.tsx",[],"/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/SignIn.page.tsx",["69"],"import React from 'react'\nimport { Auth } from 'aws-amplify';\nimport './SignIn.css'\nimport { useHistory } from \"react-router-dom\";\n\nexport const SignIn = () => {\n  let history = useHistory();\n\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    signIn(data.get('email') as string, data.get('password') as string)\n    history.push(\"/dashboard\")\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Sign In</h1>\n      <div>\n        <label htmlFor=\"email\">Email:</label>\n        <input id=\"email\" name=\"email\" type=\"email\" />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password:</label>\n        <input id=\"password\" type=\"password\" name=\"password\" />\n      </div>\n\n      <button >SIGN IN</button>\n      <button onClick={() => history.push('signup')}>SIGN UP</button>\n    </form>\n  )\n}\n\nasync function getAuth() {\n  try {\n    const user = await Auth.currentUserCredentials();\n    console.log(user)\n  } catch (err) {\n    console.log(typeof err)\n    console.log(err)\n  }\n}\n\nasync function signIn(email?: string, password?: string) {\n  try {\n      if (!email || !password) return\n      const user = await Auth.signIn(email, password);\n      console.log(user)\n  } catch (error) {\n      console.log('error signing in', error);\n  }\n}","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/SignUp.page.tsx",["70"],"import React from 'react'\nimport { Auth } from 'aws-amplify';\nimport './SignUp.css'\nimport { useHistory } from \"react-router-dom\";\n\nexport const SignUp = () => {\n  const history = useHistory()\n\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    const firstName = data.get('firstName') as string;\n    const lastName = data.get('lastName') as string;\n    const email = data.get('email') as string;\n    const phoneNumber = data.get('phoneNumber') as string;\n    const password = data.get('password') as string;\n    signUp(firstName, lastName, email, phoneNumber, password)\n    history.push('signup-confirm')\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Sign Up</h1>\n      <div>\n        <label htmlFor=\"fname\">First Name</label>\n        <input type=\"text\" id=\"firstName\" name=\"firstName\" placeholder=\"John\" required/>\n      </div>\n      <div>\n        <label htmlFor=\"lname\">Last Name</label>\n        <input type=\"text\" id=\"lastName\" name=\"lastName\" placeholder=\"Doe\" required/>\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email:</label>\n        <input id=\"email\" name=\"email\" type=\"email\" required/>\n      </div>\n      <div>\n        <label htmlFor=\"phone\">Phone Number:</label>\n        <input type=\"tel\" id=\"phoneNumber\" name=\"phoneNumber\" placeholder=\"+61412345678\" pattern=\"+61[0-9]{9}\" required/>\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password:</label>\n        <input id=\"password\" type=\"password\" name=\"password\" required/>\n      </div>\n\n      <button>SIGN UP</button>\n    </form>\n  )\n}\n\nasync function signUp(firstName: string, lastName: string, email: string,  phoneNumber: string, password: string) {\n    try {\n        const {userSub} = await Auth.signUp({\n            username: email,\n            password,\n            attributes: {\n                given_name: firstName,\n                family_name: lastName,\n                email,\n                phone_number: phoneNumber,\n            }\n        });\n    } catch (error) {\n        console.log('error signing up:', error);\n    }\n}\n\n","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/ProtectedRoute.tsx",[],"/Users/Cat1/repo/theraply/packages/therapists-web/src/dashboard/Dashboard.page.tsx",["71","72"],"/Users/Cat1/repo/theraply/packages/therapists-web/src/store.ts",[],"/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/auth.slice.ts",["73"],"import { createSlice } from '@reduxjs/toolkit';\nimport {Auth} from 'aws-amplify'\nimport { State } from '../store';\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    isSignedIn: false,\n    loading: true,\n  },\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setIsSignedIn: (state, action) => {\n      state.isSignedIn = action.payload;\n    },\n  },\n});\n\nexport const { setLoading, setIsSignedIn } = authSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const fetchIsSignedIn = dispatch => {\n//   try {\n//     await Auth.currentAuthenticatedUser();\n//     setIsSignedIn(true)\n//   } catch (err) {\n//     setIsSignedIn(false)\n//   }\n// };\n\nexport const selectIsSignedIn = (state: State) => state.auth.isSignedIn;\nexport const selectLoading = (state: State) => state.auth.loading;\n\nexport default authSlice.reducer;\n","/Users/Cat1/repo/theraply/packages/therapists-web/src/auth/SignUpConfirm.page.tsx",[],"/Users/Cat1/repo/theraply/packages/therapists-web/src/dashboard/Client.card.tsx",["74"],{"ruleId":"75","severity":1,"message":"76","line":1,"column":16,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},{"ruleId":"75","severity":1,"message":"79","line":1,"column":27,"nodeType":"77","messageId":"78","endLine":1,"endColumn":35},{"ruleId":"75","severity":1,"message":"80","line":2,"column":18,"nodeType":"77","messageId":"78","endLine":2,"endColumn":22},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":34,"column":6,"nodeType":"87","endLine":34,"endColumn":8,"suggestions":"88"},{"ruleId":"75","severity":1,"message":"89","line":34,"column":16,"nodeType":"77","messageId":"78","endLine":34,"endColumn":23},{"ruleId":"75","severity":1,"message":"90","line":52,"column":16,"nodeType":"77","messageId":"78","endLine":52,"endColumn":23},{"ruleId":"75","severity":1,"message":"91","line":6,"column":9,"nodeType":"77","messageId":"78","endLine":6,"endColumn":15},{"ruleId":"85","severity":1,"message":"92","line":14,"column":6,"nodeType":"87","endLine":14,"endColumn":8,"suggestions":"93"},{"ruleId":"75","severity":1,"message":"80","line":2,"column":9,"nodeType":"77","messageId":"78","endLine":2,"endColumn":13},{"ruleId":"75","severity":1,"message":"91","line":2,"column":9,"nodeType":"77","messageId":"78","endLine":2,"endColumn":15},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Auth' is defined but never used.","no-native-reassign",["94"],"no-negated-in-lhs",["95"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'getAuth' is defined but never used.","'userSub' is assigned a value but never used.","'Client' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchUserInfo'. Either include it or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [fetchMessages]",{"range":"102","text":"103"},"Update the dependencies array to be: [fetchUserInfo]",{"range":"104","text":"105"},[812,814],"[fetchMessages]",[507,509],"[fetchUserInfo]"]